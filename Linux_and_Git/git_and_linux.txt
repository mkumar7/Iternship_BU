UPGRADE TO RECENT PYTHON AND PIP

1) nano .zprofile
+ write in .zprofile then select M-A Format to append
2) alias = python='python3'
3) save and quit terminal
4) curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
5) python3 get-pip.py
6) pip3 --version
7) brew install --cask myprogram


SET UP VIRTUAL ENVIRONMENT 

1) python3 -m venv ~/.dockerproj 
2) source ~/.dockerproj/bin/activate 

_____________________________________________________________ 

TO BUILD DOCKER IMAGE 
1) docker build --tag=app . 
2) docker image ls 
3) docker run -it app bash 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
COMMAND TO RUN DOCKER
brew install --cask virtualbox    
$docker-machine create --driver virtualbox  worker2
$docker run -d -p 80:80 docker/getting-started (start docker desktop )
docker-machine ls  
docker-machine rm default 
docker-machine ip  manager2  
docker-machine rm default  
docker-machine env manager2  
 docker-machine ssh manager1 
rm -rf .git
______________________________________________________________
COMMAND TO RUN JENKINS
1. Download Jenkins.war from web then run command below
Running from: /Users/manishkumar/Downloads/jenkins.war
java -jar jenkins.war

COMMAND TO RUN AND CREATE ANSIBLE
1) 
_____________________________________________________________
GENERAL LINUX COMMAND 
1) Vim 
2) :q 
3) cd .. 
4) deactivate (to deactivate virtual environment) 

SSH COMMAND 

1) ssh-keygen -t rsa 
2) cat /home/ec2-user/.ssh/id_rsa.pub 
3) tar xvfz (to untar) 

GIT COMMAND 
1) git status 
2) git add Dockerfile 
3) git commit -m "adding file" 
4) git push 
_________________________________________________________________
COMMAND TO RUN VAGRANT AND ANSIBLE                                                         
1) vagrant up
2) vagrant destroy -f
3) vagrant ssh-config
4) docker run --rm -it python bash (TO RUN DOCKER LOCALLY IN BASH)
5) ansible-console localhost (to run ansible inside the container)
6) docker container ps -a (to check container running or not)

______________________________________________________________________
COOMAND TO OPERATE KUBERNETES
1) pip3 install ansible boto boto3
2) brew install kubectl 
3) kubectl version --short
4) kubectl get nodes
5) kubectl version --short
6) ./google-cloud-sdk/install.sh
7) ./google-cloud-sdk/install.sh --screen-reader=true
8) ./google-cloud-sdk/bin/gcloud init
9) docker image build -t manish5593/getting-started-k8s:1.0 .
10) docker image push manish5593/getting-started-k8s:1.0
11) docker login 
12) kubectl cluster-info 
13) kubectl apply -f pod.yml
14) kubectl get pods --watch
15) kubectl get pods -o wide
16) kubectl describe
17) kubectl describe pods hello-pod 
18) kubectl get pods
19) kubectl delete -f pod.yml
20) kubectl expose pod hello-pod --name=hello-svc --target-port=8080 --type=NodePort
service/hello-svc exposed
21) kubectl get svc
22) kubectl delete svc hello-svc
23) kubectl apply -f svc-nodeport.yml
24) kubectl get deploy
25) kubectl get rs
26) kubectl get pods --show-labels
27) kubectl delete pod web-deploy-566bd8fc84-bnhng
28) kubectl rollout status deploy web-deploy
30) kubectl rollout history deploy web-deploy
31) kubectl rollout undo deploy web-deploy --to-revision=1

